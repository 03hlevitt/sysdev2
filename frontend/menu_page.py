"""customer facing menu page"""
from tkinter import (
    StringVar,
    ACTIVE,
)
from tkinter import ttk
from backend.main import Backend
from frontend.order_page import orderListForm
from frontend.common import (
    BaseAddForm,
    UpdateMsg,
    BasePage,
    create_details_frame,
    create_list_frame,
    create_cmdframe,
    configure_listree,
)


class MenuPage(BasePage):
    """menu page"""
    def __init__(self):
        """constructor for menu page"""
        super().__init__("menu page", "1100x600", "menu page")
        self.backend = Backend()

        def create_detail_view(self, baseframe: object) -> object:
            """creates control panel in the middle of the screen and frames for listtree

            Args:
                baseframe (object): base frame that it sits on

            Returns:
                listframe (object): for place the list tree view on
            """

            detailsframe = create_details_frame(baseframe)

            details_lname_label = ttk.Label(detailsframe, text="Item")
            details_lname_label.grid(column=0, row=1)
            details_lname = ttk.Entry(detailsframe, textvariable=item_value)
            details_lname.grid(column=1, row=1)

            details_street_label = ttk.Label(detailsframe, text="Price")
            details_street_label.grid(column=0, row=2)
            details_street = ttk.Entry(detailsframe, textvariable=price_value)
            details_street.grid(column=1, row=2)
            cmdframe = create_cmdframe(detailsframe)

            self.cmdOk = ttk.Button(
                cmdframe, text="OK", state="disabled", command=update_item
            )
            self.cmdOk.grid(column=0, row=0)

            self.cmdOrders = ttk.Button(
                cmdframe, text="Orders", state="enabled", command=got_to_orders
            )
            self.cmdOrders.grid(column=1, row=0)

            self.cmdAddorder = ttk.Button(
                cmdframe, text="add item", state="active", command=add_item
            )
            self.cmdAddorder.grid(column=2, row=0)

            self.cmd_delete_order = ttk.Button(
                cmdframe,
                text="delete item",
                state="active",
                command=delete_item,
            )
            self.cmd_delete_order.grid(column=3, row=0)

            listframe = create_list_frame(baseframe)

            return listframe

        def update_buttons():
            """sets buttons to active in aid refreshing the page"""
            self.cmdOk.config(state=ACTIVE)
            self.cmdOrders.config(state=ACTIVE)

        def got_to_orders():
            """go to the orders page"""
            self.root.destroy()
            orderListForm()

        def add_item():
            """generate the add item page"""
            self.root.destroy()
            fields = "item", "price"
            BaseAddForm("menu", fields, "order")

        def clear_selected_from_input():
            """delete all items which were generated by selecting the listree"""
            item_value.set("")
            price_value.set("")
            update_buttons()

        def listtreeitem_selected(event: object):
            """set values for later inputs when selecting the listree

            Args:
                event (object): user selecting the listree
            """
            for selected_item in listtree.selection():
                item = self.backend.existing_item(selected_item)

                item_value.set(selected_item)
                price_value.set(item.price)

            update_buttons()

        def update_item():
            """update the price of an item in the backend"""
            dts_item = item_value.get()
            dts_price = price_value.get()

            self.update_item_backend(dts_item, dts_price)
            self.populate_listree(listtree)
            UpdateMsg("Update Successful!")

        def delete_item():
            """delete a menu item from the backend"""
            dts_item = item_value.get()

            self.delete_item_backend(dts_item)
            clear_selected_from_input()
            self.populate_listree(listtree)
            UpdateMsg("Item Deleted!")

        item_value = StringVar()
        price_value = StringVar()

        list_frame = create_detail_view(self, self.baseframe)
        listtree = self.create_list_tree(list_frame)

        listtree.bind("<<TreeviewSelect>>", listtreeitem_selected)

        self.populate_listree(listtree, "menu")

    def update_item_backend(self, item, price):
        """update the price of an item in the backend"""
        item = self.backend.existing_item(item)
        item.update_price(price)
        item.save()

    def delete_item_backend(self, item):
        """deete an item from the db"""
        item = self.backend.existing_item(item)
        item.delete_from_db()

    def create_list_tree(self, listframe:object) -> ttk.Treeview:
        """create tkinter treeview

        Args:
            listframe (object): tk inter frame to put list tree in

        Returns:
            ttk.Treeview: list tree
        """
        listtree = ttk.Treeview(
            listframe,
            column=("item", "price"),
            show="headings",
            selectmode="browse",
        )
        listtree.heading("item", text="item")
        listtree.heading("price", text="price")
        listtree.column("item", width=70)
        listtree.column("price", width=70)
        listtree = configure_listree(listtree, listframe)

        return listtree
